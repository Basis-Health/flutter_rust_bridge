"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[7695],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=u(r),m=o,d=f["".concat(c,".").concat(m)]||f[m]||p[m]||i;return r?n.createElement(d,a(a({ref:t},l),{},{components:r})):n.createElement(d,a({ref:t},l))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9058:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const i={},a="Concurrent borrows",s={unversionedId:"guides/lifetimes/concurrent-borrows",id:"guides/lifetimes/concurrent-borrows",title:"Concurrent borrows",description:"Suppose we have fn f(foo: &Foo) -> &Bar { .. }.",source:"@site/docs/guides/lifetimes/concurrent-borrows.md",sourceDirName:"guides/lifetimes",slug:"/guides/lifetimes/concurrent-borrows",permalink:"/flutter_rust_bridge/guides/lifetimes/concurrent-borrows",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/lifetimes/concurrent-borrows.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Return references",permalink:"/flutter_rust_bridge/guides/lifetimes/return-references"},next:{title:"Alternatives",permalink:"/flutter_rust_bridge/guides/lifetimes/alternatives"}},c={},u=[],l={toc:u};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"concurrent-borrows"},"Concurrent borrows"),(0,o.kt)("p",null,"Suppose we have ",(0,o.kt)("inlineCode",{parentName:"p"},"fn f(foo: &Foo) -> &Bar { .. }"),".\nThen, before the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bar")," object is disposed (or is garbage collected),\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," can only be used immutably and not mutably.\nMore specifically,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"var foo = Foo();\nvar bar = f(foo);\n// functionThatMutablyBorrowFoo(foo); // <-- cannot do it here\nbar.dispose();\nfunctionThatMutablyBorrowFoo(foo); // <-- can do it here\n")),(0,o.kt)("p",null,"This is a limitation somehow caused by the combination of Rust and Dart:\nIn Rust, we have the strict limitation that, if a type is borrowed immutably,\nthen we can never borrow it mutably, ",(0,o.kt)("em",{parentName:"p"},"unless")," the former borrow is removed.\nTherefore, in the example above, when ",(0,o.kt)("inlineCode",{parentName:"p"},"bar")," object is alive, ",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," is borrowed,\nand we cannot have another mutable borrow."),(0,o.kt)("p",null,'If this makes your scenario much more complicated,\nfeel free to open an issue to discuss your scenario,\nand we can discuss how to improve it.\nFor example, we may introduce something like a "scope" where references out of scope will be disposed.'),(0,o.kt)("p",null,"In some scenarios, due to this limitation, the alternatives introduced in the next page may be appealing."))}p.isMDXComponent=!0}}]);