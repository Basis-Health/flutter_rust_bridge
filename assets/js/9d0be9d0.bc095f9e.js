"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[583],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},o="Methods",s={unversionedId:"guides/functions/methods",id:"guides/functions/methods",title:"Methods",description:"In addition to standard functions,",source:"@site/docs/guides/functions/methods.md",sourceDirName:"guides/functions",slug:"/guides/functions/methods",permalink:"/flutter_rust_bridge/guides/functions/methods",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/functions/methods.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/flutter_rust_bridge/guides/functions/overview"},next:{title:"Callables",permalink:"/flutter_rust_bridge/guides/functions/callables"}},l={},u=[{value:"Methods in external crates",id:"methods-in-external-crates",level:2},{value:"Example",id:"example",level:2},{value:"Example 1: Methods in same crate",id:"example-1-methods-in-same-crate",level:3},{value:"Example 2: Methods in external crates",id:"example-2-methods-in-external-crates",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"methods"},"Methods"),(0,a.kt)("p",null,"In addition to standard functions,\nthere is support for structs with methods. Both static methods, and non-static methods are supported.\nNo special syntax is needed, and just write normal ",(0,a.kt)("inlineCode",{parentName:"p"},"impl YourStruct { pub fn your_method() {} }"),"."),(0,a.kt)("h2",{id:"methods-in-external-crates"},"Methods in external crates"),(0,a.kt)("p",null,"For methods that are not defined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"rust_input")," folders in the current crate,\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"#[frb(external)]")," syntax (see example below) is needed to make flutter_rust_bridge aware of the methods."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("h3",{id:"example-1-methods-in-same-crate"},"Example 1: Methods in same crate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct SumWith { pub x: u32 }\n\nimpl SumWith {\n    pub fn sum(&self, y: u32) -> u32 { self.x + y }\n    pub fn sum_static(x: u32, y: u32) -> u32 { x + y }\n}\n")),(0,a.kt)("p",null,"Becomes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class SumWith {\n  final int x;\n\n  const SumWith({\n    required this.x,\n  });\n\n  Future<int> sum({required int y, dynamic hint}) { ... }\n\n  static Future<int> sumStatic({required int x, required int y, dynamic hint}) { ... }\n}\n")),(0,a.kt)("p",null,"Remark: If you are curious about ",(0,a.kt)("inlineCode",{parentName:"p"},"Future"),", have a look at ",(0,a.kt)("a",{parentName:"p",href:"../concurrency/async-dart"},"this"),"."),(0,a.kt)("h3",{id:"example-2-methods-in-external-crates"},"Example 2: Methods in external crates"),(0,a.kt)("p",null,"Suppose we have these in external crates:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct MyExternalStruct {\n    ...\n}\n\nimpl MyExternalStruct {\n    pub fn simple_external_method(&self) -> String {\n        // ... some long implementations ...\n    }\n}\n")),(0,a.kt)("p",null,"Then, we only need to repeat the function signatures in our main crate as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[frb(external)]\nimpl MyExternalStruct {\n    pub fn simple_external_method(&self) -> String {}\n}\n")),(0,a.kt)("p",null,"Remark: Just leave the function body empty (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"{}"),"), no need to put anything there."),(0,a.kt)("p",null,"This feature is compatible with the ",(0,a.kt)("a",{parentName:"p",href:"../types/translatable/external/diff-crate"},"mirroring")," feature as well."))}p.isMDXComponent=!0}}]);