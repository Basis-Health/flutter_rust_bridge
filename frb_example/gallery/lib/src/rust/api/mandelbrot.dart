// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `clone`, `clone`, `fmt`, `fmt`

Future<Uint8List> drawMandelbrot(
        {required Size imageSize,
        required Point zoomPoint,
        required double scale,
        required int numThreads}) =>
    RustLib.instance.api.crateApiMandelbrotDrawMandelbrot(
        imageSize: imageSize,
        zoomPoint: zoomPoint,
        scale: scale,
        numThreads: numThreads);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<:: core :: fmt :: Formatter>>
@sealed
class CoreFmtFormatter extends RustOpaque {
  CoreFmtFormatter.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  CoreFmtFormatter.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CoreFmtFormatter,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CoreFmtFormatter,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_CoreFmtFormatterPtr,
  );
}

class Point {
  final double x;
  final double y;

  const Point({
    required this.x,
    required this.y,
  });

  Future<Point> Clone({dynamic hint}) =>
      RustLib.instance.api.pointClone(that: this, hint: hint);

  Future<void> Fmt({required CoreFmtFormatter f, dynamic hint}) =>
      RustLib.instance.api.pointFmt(that: this, f: f, hint: hint);

  @override
  int get hashCode => x.hashCode ^ y.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Point &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y;
}

class Size {
  final int width;
  final int height;

  const Size({
    required this.width,
    required this.height,
  });

  Future<Size> Clone({dynamic hint}) =>
      RustLib.instance.api.sizeClone(that: this, hint: hint);

  Future<void> Fmt({required CoreFmtFormatter f, dynamic hint}) =>
      RustLib.instance.api.sizeFmt(that: this, f: f, hint: hint);

  @override
  int get hashCode => width.hashCode ^ height.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Size &&
          runtimeType == other.runtimeType &&
          width == other.width &&
          height == other.height;
}
