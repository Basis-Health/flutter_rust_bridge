"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[8602],{15680:(e,t,r)=>{r.d(t,{xA:()=>l,yg:()=>g});var n=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(r),g=a,f=d["".concat(c,".").concat(g)]||d[g]||p[g]||o;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},78107:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(58168),a=(r(96540),r(15680));const o={},i="Stack Traces",s={unversionedId:"guides/how-to/stack-trace",id:"guides/how-to/stack-trace",title:"Stack Traces",description:"This is standard Rust behavior, and is unrelated to flutterrustbridge.",source:"@site/docs/guides/how-to/stack-trace.md",sourceDirName:"guides/how-to",slug:"/guides/how-to/stack-trace",permalink:"/flutter_rust_bridge/guides/how-to/stack-trace",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/how-to/stack-trace.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How-to",permalink:"/flutter_rust_bridge/guides/how-to/"},next:{title:"Debugging",permalink:"/flutter_rust_bridge/guides/how-to/debug"}},c={},u=[{value:"Errors (<code>Result</code>)",id:"errors-result",level:2},{value:"Panics",id:"panics",level:2}],l={toc:u};function p(e){let{components:t,...r}=e;return(0,a.yg)("wrapper",(0,n.A)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"stack-traces"},"Stack Traces"),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},'This is standard Rust behavior, and is unrelated to flutter_rust_bridge.\nHowever, we do provide defaults to be "battery included".'),(0,a.yg)("p",{parentName:"admonition"},"If using the template by ",(0,a.yg)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen create/integrate"),", this is already configured by default,\nvia the auto-generated call to ",(0,a.yg)("inlineCode",{parentName:"p"},"flutter_rust_bridge::setup_default_user_utils()"),".")),(0,a.yg)("h2",{id:"errors-result"},"Errors (",(0,a.yg)("inlineCode",{parentName:"h2"},"Result"),")"),(0,a.yg)("p",null,"To pass Rust stack traces to flutter, you need to set ",(0,a.yg)("inlineCode",{parentName:"p"},"RUST_BACKTRACE")," in the running application. For that simply add ",(0,a.yg)("inlineCode",{parentName:"p"},'env::set_var("RUST_BACKTRACE", "1");')," before initialising the bridge."),(0,a.yg)("p",null,"Note: The ",(0,a.yg)("inlineCode",{parentName:"p"},"--dart-define")," will not work, you ",(0,a.yg)("strong",{parentName:"p"},"must")," use ",(0,a.yg)("inlineCode",{parentName:"p"},"env::set_var"),', because the former does not set the "environment variable" in the common sense, but instead a special thing only visible to Dart.'),(0,a.yg)("h2",{id:"panics"},"Panics"),(0,a.yg)("p",null,"The standard Rust does not provide stack traces when catching a panic.\nIf you want to know the stack traces, you can use approaches like\n",(0,a.yg)("a",{parentName:"p",href:"https://stackoverflow.com/questions/69593235/how-to-get-panic-information-i-e-stack-trace-with-catch-unwind"},"https://stackoverflow.com/questions/69593235/how-to-get-panic-information-i-e-stack-trace-with-catch-unwind"),".\nThe builtin utils do use it."))}p.isMDXComponent=!0}}]);